#include<iostream>
#include<iomanip>
#include <Windows.h>
#include "func.h"

using namespace std;

int main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	const int n = 10;

	double x1t[n][n], x2t[n][n], x3t[n][n], x4t[n][n], x5t[n][n], x6t[n][n], x7t[n][n], x8t[n][n], x9t[n][n], x10t[n][n];
	double x1m[n][n], x2m[n][n], x3m[n][n], x4m[n][n], x5m[n][n], x6m[n][n], x7m[n][n], x8m[n][n], x9m[n][n], x10m[n][n];
	double x1c[n][n], x2c[n][n], x3c[n][n], x4c[n][n], x5c[n][n], x6c[n][n], x7c[n][n], x8c[n][n], x9c[n][n], x10c[n][n];
	double W[n][n];
	double yv[n][n];
	double ynv[n][n];

	double x1[n][n] =
	{
		-1, -1, -1, -1, -1,  -1, -1, 1, 1, -1,
		-1, -1, -1 ,-1, -1, -1, 1, -1, 1, -1,
		-1, -1, -1, -1, -1, 1, -1, -1, 1, -1,
		-1, -1, -1, -1, 1, -1, -1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
	};
	cout << "x1:" << endl;
	showvector(x1);

	double x2[n][n] = 
	{
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, 1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, 1, 1, -1, -1, -1,
		-1, -1, -1, -1, 1, -1, 1, -1, -1, -1,
		-1, -1, -1, 1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
	};
	cout << "x2:" << endl;
	showvector(x2);

	double x3[n][n] = 
	{
		-1, -1, -1, -1, -1, -1, 1, 1, -1, -1,
		-1, -1, -1, -1, 1, 1, -1, 1, -1, -1,
		-1, -1, -1, 1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
	};

	cout << "x3:" << endl;
	showvector(x3);

	double x4[n][n] = 
	{
		-1, -1, -1, -1, 1, 1, -1, -1, -1, -1,
		-1, -1, -1, 1, -1, 1, -1, -1, -1, -1,
		-1, -1, 1, -1, -1, 1, -1, -1, -1, -1,
		-1, 1, -1, -1, -1, 1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, 1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, 1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, 1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, 1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, 1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, 1, -1, -1, -1, -1,
	};

	cout << "x4:" << endl;
	showvector(x4);

	double x5[n][n] = 
	{
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, 1, 1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, 1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
	};

	cout << "x5:" << endl;
	showvector(x5);

	double x6[n][n] = 
	{
		-1, -1, -1, -1, -1, 1, 1, -1, -1, -1,
		-1, -1, -1, 1, 1, -1, 1, -1, -1, -1,
		-1, -1, 1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
	};

	cout << "x6:" << endl;
	showvector(x6);

	double x7[n][n] = 
	{
		-1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, 1, -1,
	};

	cout << "x7:" << endl;
	showvector(x7);

	double x8[n][n] = 
	{
		-1, -1, -1, -1, -1, -1, 1, 1, -1, -1,
		-1, -1, -1, -1, 1, 1, -1, 1, -1, -1,
		-1, -1, 1, 1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
	};

	cout << "x8:" << endl;
	showvector(x8);

	double x9[n][n] = 
	{
		-1, -1, -1, -1, -1, -1, -1, -1, 1, 1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, 1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
	};

	cout << "x9:" << endl;
	showvector(x9);

	double x10[n][n] = 
	{
		-1, -1, -1, -1, -1, 1, 1, -1, -1, -1,
		-1, -1, -1, -1, 1, -1, 1, -1, -1, -1,
		-1, -1, -1, 1, -1, -1, 1, -1, -1, -1,
		-1, -1, 1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
	};

	cout << "x10:" << endl;
	showvector(x10);
	
	double y[n][n] = {
		-1, -1, -1, -1, -1, -1, 1, 1, -1, -1,
		-1, -1, -1, -1, -1, 1, -1, 1, -1, -1,
		-1, -1, -1, -1, 1, -1, -1, 1, -1, -1,
		-1, -1, -1, 1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, 1, -1, -1,
	};
	
	/*double y[n][n] = {
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	};*/
	cout << "y:" << endl;
	showvector(y);

	transpor(x1, x1t);
	mult(x1t, x1, x1m);
	mult_cof(x1m, x1c);

	transpor(x2, x2t);
	mult(x2t, x2, x2m);
	mult_cof(x2m, x2c);

	transpor(x3, x3t);
	mult(x3t, x3, x3m); 
	mult_cof(x3m, x3c);

	transpor(x4, x4t); 
	mult(x4t, x4, x4m); 
	mult_cof(x4m, x4c);

	transpor(x5, x5t); 
	mult(x5t, x5, x5m);
	mult_cof(x5m, x5c);

	transpor(x6, x6t);
	mult(x6t, x6, x6m);
	mult_cof(x6m, x6c);

	transpor(x7, x7t);
	mult(x7t, x7, x7m);
	mult_cof(x7m, x7c);

	transpor(x8, x8t); 
	mult(x8t, x8, x8m);
	mult_cof(x8m, x8c);

	transpor(x9, x9t);
	mult(x9t, x9, x9m); 
	mult_cof(x9m, x9c);

	transpor(x10, x10t); 
	mult(x10t, x10, x10m); 
	mult_cof(x10m, x10c);

	sum_10(x1c, x2c, x3c, x4c, x5c, x6c, x7c, x8c, x9c, x10c, W);

	cout << "Весовая матрица: " << endl;
	show(W);
	cout << endl;

	mult(W, y, yv);
	cout << "Выходной вектор Y*: " << endl;
	show(yv);
	cout << endl;

	sign(yv);
	cout << "Нормированный выходной вектор Y0:" << endl;
	show(yv);
	cout << endl;
	showvector(yv);

	double K[n];
	double L1[n], L2[n], L3[n], L4[n], L5[n], L6[n], L7[n], L8[n], L9[n], L10[n];
	double x1W[n][n],x2W[n][n],x3W[n][n],x4W[n][n],x5W[n][n], x6W[n][n],x7W[n][n],x8W[n][n],x9W[n][n], x10W[n][n];

	mult(W, x1, x1W); 
	mult(W, x2, x2W); 
	mult(W, x3, x3W); 
	mult(W, x4, x4W);
	mult(W, x5, x5W); 
	mult(W, x6, x6W); 
	mult(W, x7, x7W); 
	mult(W, x8, x8W); 
	mult(W, x9, x9W); 
	mult(W, x10, x10W);

	sign(x1W);
	sign(x2W); 
	sign(x3W); 
	sign(x4W); 
	sign(x5W); 
	sign(x6W); 
	sign(x7W); 
	sign(x8W); 
	sign(x9W); 
	sign(x10W);

	L1[0] = dist(x1, x1W);
	L1[1] = dist(x2, x1W);
	L1[2] = dist(x3, x1W);
	L1[3] = dist(x4, x1W);
	L1[4] = dist(x5, x1W);
	L1[5] = dist(x6, x1W);
	L1[6] = dist(x7, x1W);
	L1[7] = dist(x8, x1W);
	L1[8] = dist(x9, x1W);
	L1[9] = dist(x10, x1W);

	L2[0] = dist(x1, x2W);
	L2[1] = dist(x2, x2W);
	L2[2] = dist(x3, x2W);
	L2[3] = dist(x4, x2W);
	L2[4] = dist(x5, x2W);
	L2[5] = dist(x6, x2W);
	L2[6] = dist(x7, x2W);
	L2[7] = dist(x8, x2W);
	L2[8] = dist(x9, x2W);
	L2[9] = dist(x10, x2W);

	L3[0] = dist(x1, x3W);
	L3[1] = dist(x2, x3W);
	L3[2] = dist(x3, x3W);
	L3[3] = dist(x4, x3W);
	L3[4] = dist(x5, x3W);
	L3[5] = dist(x6, x3W);
	L3[6] = dist(x7, x3W);
	L3[7] = dist(x8, x3W);
	L3[8] = dist(x9, x3W);
	L3[9] = dist(x10, x3W);

	L4[0] = dist(x1, x4W);
	L4[1] = dist(x2, x4W);
	L4[2] = dist(x3, x4W);
	L4[3] = dist(x4, x4W);
	L4[4] = dist(x5, x4W);
	L4[5] = dist(x6, x4W);
	L4[6] = dist(x7, x4W);
	L4[7] = dist(x8, x4W);
	L4[8] = dist(x9, x4W);
	L4[9] = dist(x10, x4W);

	L5[0] = dist(x1, x5W);
	L5[1] = dist(x2, x5W);
	L5[2] = dist(x3, x5W);
	L5[3] = dist(x4, x5W);
	L5[4] = dist(x5, x5W);
	L5[5] = dist(x6, x5W);
	L5[6] = dist(x7, x5W);
	L5[7] = dist(x8, x5W);
	L5[8] = dist(x9, x5W);
	L5[9] = dist(x10, x5W);

	L6[0] = dist(x1, x6W);
	L6[1] = dist(x2, x6W);
	L6[2] = dist(x3, x6W);
	L6[3] = dist(x4, x6W);
	L6[4] = dist(x5, x6W);
	L6[5] = dist(x6, x6W);
	L6[6] = dist(x7, x6W);
	L6[7] = dist(x8, x6W);
	L6[8] = dist(x9, x6W);
	L6[9] = dist(x10, x6W);

	L7[0] = dist(x1, x7W);
	L7[1] = dist(x2, x7W);
	L7[2] = dist(x3, x7W);
	L7[3] = dist(x4, x7W);
	L7[4] = dist(x5, x7W);
	L7[5] = dist(x6, x7W);
	L7[6] = dist(x7, x7W);
	L7[7] = dist(x8, x7W);
	L7[8] = dist(x9, x7W);
	L7[9] = dist(x10, x7W);

	L8[0] = dist(x1, x8W);
	L8[1] = dist(x2, x8W);
	L8[2] = dist(x3, x8W);
	L8[3] = dist(x4, x8W);
	L8[4] = dist(x5, x8W);
	L8[5] = dist(x6, x8W);
	L8[6] = dist(x7, x8W);
	L8[7] = dist(x8, x8W);
	L8[8] = dist(x9, x8W);
	L8[9] = dist(x10, x8W);

	L9[0] = dist(x1, x9W);
	L9[1] = dist(x2, x9W);
	L9[2] = dist(x3, x9W);
	L9[3] = dist(x4, x9W);
	L9[4] = dist(x5, x9W);
	L9[5] = dist(x6, x9W);
	L9[6] = dist(x7, x9W);
	L9[7] = dist(x8, x9W);
	L9[8] = dist(x9, x9W);
	L9[9] = dist(x10, x9W);

	L10[0] = dist(x1, x10W);
	L10[1] = dist(x2, x10W);
	L10[2] = dist(x3, x10W);
	L10[3] = dist(x4, x10W);
	L10[4] = dist(x5, x10W);
	L10[5] = dist(x6, x10W);
	L10[6] = dist(x7, x10W);
	L10[7] = dist(x8, x10W);
	L10[8] = dist(x9, x10W);
	L10[9] = dist(x10, x10W);


	double Q[n];

	/*
	Q[0] = minim(L1);
	Q[1] = minim(L2);
	Q[2] = minim(L3);
	Q[3] = minim(L4);
	Q[4] = minim(L5);
	Q[5] = minim(L6);
	Q[6] = minim(L7);
	Q[7] = minim(L8);
	Q[8] = minim(L9);
	Q[9] = minim(L10);
	*/
	
	Q[0] = av(L1);
	Q[1] = av(L2);
	Q[2] = av(L3);
	Q[3] = av(L4);
	Q[4] = av(L5);
	Q[5] = av(L6);
	Q[6] = av(L7);
	Q[7] = av(L8);
	Q[8] = av(L9);
	Q[9] = av(L10);
	

	K[0] = dist(x1, yv);
	K[1] = dist(x2, yv);
	K[2] = dist(x3, yv);
	K[3] = dist(x4, yv);
	K[4] = dist(x5, yv);
	K[5] = dist(x6, yv);
	K[6] = dist(x7, yv);
	K[7] = dist(x8, yv);
	K[8] = dist(x9, yv);
	K[9] = dist(x10, yv);


	
	/*for (int i = 0; i < n; i++) 
	{
			cout << Q[i] << endl;
	}*/
	double minX = minim(K);
	double krit = minim(Q);
	cout << "Критическое расстояние : " << krit << endl;
	cout << "Минимальное расстояние : " <<  minX << endl;
	if (minX <= krit)
	{
		cout << "Принадлежит множеству" << endl;
	}
	else
	{
		cout << "Не принадлежит множеству" << endl;
	}
	system("pause");
	return 0;

}